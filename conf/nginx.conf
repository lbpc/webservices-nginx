timer_resolution 100ms;
worker_processes auto;
worker_rlimit_nofile 1048576;
thread_pool default threads=16 max_queue=65536;
error_log /dev/stderr debug;

events {
  worker_connections 10000;
  multi_accept off;
  accept_mutex on;
  accept_mutex_delay 1ms;
}

http {
  vhost_traffic_status_zone;
  log_format combined_host '$remote_addr - $remote_user [$time_local] "$request" $status $filter_reason $filter_action $filter_passed $body_bytes_sent "$http_referer" "$http_user_agent" $host $request_time $upstream_response_time $pipe $connection $connection_requests $upstream_cache_status';
  access_log /dev/stdout combined_host;
  include mime.types;
  include lua.conf;
  include cache.conf;
  include proxy.conf;
  include ssl.conf;
  include gzip.conf;
  default_type application/octet-stream;
  sendfile on;
  directio 8m;
  send_timeout 5m;
  reset_timedout_connection on;
  server_names_hash_bucket_size 20480;
  server_names_hash_max_size 20480;
  server_tokens off;
  tcp_nodelay on;
  tcp_nopush on;
  large_client_header_buffers 4 16k;
  client_max_body_size 1g;
  client_body_buffer_size 128k;
  port_in_redirect off;
  limit_req_zone $host zone=req_perhost:256m rate=256r/s;
  limit_req_zone $host zone=req_to_adm:256m rate=64r/s;
  access_by_lua_file lua/filter.lua;
  include /read/*.conf;
  upstream fileserver {
    server 127.0.0.1:6060;
    keepalive 8;
  }
  server {
    listen 0.0.0.0:5080 default;
    listen 0.0.0.0:5443 ssl http2 default;
    ssl_certificate  /read/ssl/majordomo.ru.pem;
    ssl_certificate_key /read/ssl/majordomo.ru.key;
    ssl_certificate_by_lua_file lua/default_server_ssl.lua;
    allow 127.0.0.1;
    allow 172.16.0.0/16;
    allow 81.95.28.24/29;
    deny all;
    keepalive_timeout 0;
    error_page 403 /http_403.html;
    location = /http_403.html {
      root html;
      ssi on;
      internal;
      allow all;
    }
    location / {
      try_files $uri =404;
    }
    location /unarc {
      client_max_body_size 0;
      proxy_pass http://fileserver;
      allow all;
    }
    location /server-status {
      stub_status on;
      access_log off;
    }
    location /status {
      vhost_traffic_status_display;
      vhost_traffic_status_display_format html;
      access_log off;
    }
    location /ip-filter {
      content_by_lua_file lua/filter_api.lua;
    }
    location ~ /apache2/(.*) {
      set_by_lua_block $ups_name {
        local p =
          ngx.var.uri:match('^/(.+/default)') or
          ngx.var.uri:match('^/(.+/unsafe)') or
          ngx.var.uri:match('^/(.+/nochmod)') or
          ngx.var.uri:match('^/(.+/hardened)') or
          ngx.var.uri:match('^/(.+)/') .. '/default'
        ngx.log(ngx.DEBUG, p)
        return p:gsub('/', '-')
      }
      rewrite /apache2/([^/]+/)+(.*) /$2 break;
      error_page 502 =403 /http_403.html;
      proxy_pass http://$ups_name;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto http;
      proxy_set_header Range "";
    }
  }
  include /read/sites-enabled/*.conf;
}
